'use strict';

let _ = require('lodash');
let fs = require('fs');
let path = require('path');
let async = require('async');
let request = require('request');

if (!process.argv || process.argv.length < 3) {
    console.log('Vizabi csv files will be generated by default, cause file with schemas was not provided as an argument.');
}

if (process.argv.length > 3) {
    console.log('Only first given file path will be used by data generatior');
}

const WS_URL = process.env.WS_URL || 'http://waffle-server-dev.gapminderdev.org';
const DEFAULT_URL_PATH = `${WS_URL}/api/graphs/stats/vizabi-tools`;

let endpoints = {
    geos: {
        path: DEFAULT_URL_PATH
    },
    measureValues: {
        path: DEFAULT_URL_PATH
    }
};

let generationSchemaFile = process.argv[2];
let generationSchemas = generationSchemaFile ? require(path.resolve(__dirname, generationSchemaFile)) : require('./vizabi-csv-schemas');

let generationTasks = _.map(generationSchemas, schema => {
    return cb => {
        async.waterfall([
            cb => request(createUrl(schema), (err, res, body) => cb(err, body)),
            (csv, cb) => fs.writeFile(schema.file, csv.replace(/"null"/g, ''), 'utf8', cb)
        ], (error) => {
            if (error) {
                console.error(error);
            }
            console.log(`Completed generating ${schema.file}`);
            return cb(error);
        });
    }
});

async.parallelLimit(generationTasks, 10, error => {
    if (error) {
        console.error(error);
    }

    console.log('All generation tasks were completed');
    process.exit(0);
});

function createUrl(schema) {
    let urlPath = endpoints[schema.endpoint] ? endpoints[schema.endpoint].path : DEFAULT_URL_PATH;
    if (!schema.query) return urlPath;

    return `${urlPath}?${schema.query}`;
}
